@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using SpotifyAuth.Data
@using System.Security.Claims

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Daten</PageTitle>

<h3>Profile</h3>
<StatusMessage />

<div class="row">
    <div class="col-md-6">

        <div class="form-floating mb-3">
            <input type="text" value="@username" class="form-control"  disabled />
            <label for="username" class="form-label">Username</label>
        </div>
        <div class="form-floating mb-3">
            <input type="email" value="@email" class="form-control" disabled />
            <label for="email" class="form-label">Email</label>
        </div>
        <div class="">
            @foreach(var claim in claims)
            {
                <div class="form-floating mb-3">
                    <input type="text" value="@claim.Value" class="form-control" disabled />
                    <label for="email" class="form-label">@claim.Type</label>
                </div>
            }
        </div>
    </div>
    <div class="col-md-6">
        <p>Your account contains personal data that you have given us. This page allows you to download or delete that data.</p>
        <p>
            <strong>Deleting this data will permanently remove your account, and this cannot be recovered.</strong>
        </p>
        <div class="d-flex gap-2">
            <form action="Account/Manage/DownloadPersonalData" method="post">
                <AntiforgeryToken />
                <button class="btn btn-primary" type="submit">Download</button>
            </form>
            <p>
                <a href="Account/Manage/Delete" class="btn btn-danger">Delete Account</a>
            </p>
        </div>
    </div>
</div>

@code {
    private ApplicationUser user = default!;
    private string? username;
    private string? email;
    private IList<Claim> claims { get; set; } = new List<Claim>();

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        username = await UserManager.GetUserNameAsync(user);
        email = await UserManager.GetEmailAsync(user);
        claims = await UserManager.GetClaimsAsync(user);
        
    }
}
