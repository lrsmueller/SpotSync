@namespace TablerCookieConsent
@using BytexDigital.Blazor.Components.CookieConsent.Dialogs.Settings
@using BytexDigital.Blazor.Components.CookieConsent.Internal
@using System.Globalization
@using Microsoft.Extensions.Options
@inherits CookieConsentSettingsModalComponentBase

<div class="modal settings-modal" tabindex="-1" data-bs-backdrop="static">
    <div class="modal-dialog" role="document">
        <div class="modal-content">

            <div class="modal-header">
                <h1 class="modal-title">
                    @Localizer.GetLocalization(Options.Value.SettingsTitleText, CultureCode, DefaultCultureCode)
                </h1>

                <button aria-lable="Close" @onclick="async () => await OnClosePreferences.InvokeAsync(false)" class="btn-close"></button>
            </div>

            <div class="modal-body">
                <p class="mb-2">
                    @Localizer.GetLocalization(Options.Value.SettingsDescriptionText,CultureCode, DefaultCultureCode)
                </p>

                <div class="mb-3">
                    <a class="" href="@Options.Value.PolicyUrl" target="_blank">
                        @Localizer.GetLocalization(Options.Value.ShowPolicyText,CultureCode,DefaultCultureCode)
                        </a>
                </div>

                <div class="mb-2 accordion">
                    @foreach (var category in Options.Value.Categories)
                    {
                        <TablerCookieConsentSettingsCategory @key="category.Identifier" Category="category" Selected="AcceptedCategories.Contains(category.Identifier)" SelectedChanged="val => SelectedChanged(category, val)"/>
                    }
                </div>
            </div>

            <div class="modal-footer ">
                
                        
                <button @onclick="AllowSelectedAsync" class="btn btn-primary col-12 col-lg-auto">
                    @Localizer.GetLocalization(Options.Value.SettingsContinueWithSelectedPreferencesText, CultureCode, DefaultCultureCode)
                </button>
                        
                <button @onclick="AllowAllAsync" class="btn btn-secondary col-12 col-lg-auto">
                    @Localizer.GetLocalization(Options.Value.ConsentAcceptAllText,CultureCode, DefaultCultureCode)
                </button>
                        
            </div>
        </div>
    </div>
</div>

@code {
    [Inject] protected IOptions<CookieConsentOptions> Options { get; set; }

    [Inject] protected CookieConsentService CookieConsentService { get; set; }

    [Inject] protected CookieConsentLocalizer Localizer { get; set; }


    private string CultureCode => CultureInfo.CurrentCulture.TwoLetterISOLanguageName;
    private string DefaultCultureCode => "en";

    public List<string> AcceptedCategories { get; set; } = new();
    public List<string> AcceptedServices { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var preferences = await CookieConsentService.GetPreferencesAsync();

        AcceptedCategories = preferences.AllowedCategories.ToList();
        AcceptedServices = preferences.AllowedServices.ToList();

        foreach (var category in Options.Value.Categories.Where(x => x.IsRequired))
        {
            AcceptedCategories.Add(category.Identifier);
            AcceptedServices.AddRange(category.Services.Select(x => x.Identifier));
        }

        if (!await CookieConsentService.IsCurrentRevisionAcceptedAsync())
        {
            // Everytime we have a new revision, we want to also add all preselected categories and services
            foreach (var category in Options.Value.Categories.Where(x => x.IsPreselected))
            {
                AcceptedCategories.Add(category.Identifier);
                AcceptedServices.AddRange(category.Services.Select(x => x.Identifier));
            }
        }

        // Cleanup
        AcceptedCategories = AcceptedCategories.Distinct().ToList();
        AcceptedServices = AcceptedServices.Distinct().ToList();
    }

    private async Task AllowAllAsync()
    {
        await CookieConsentService.SavePreferencesAcceptAllAsync();
        await OnClosePreferences.InvokeAsync(true);
    }

    private async Task AllowSelectedAsync()
    {
        await CookieConsentService.SavePreferencesAsync(new CookiePreferences
            {
                AcceptedRevision = Options.Value.Revision,
                AllowedCategories = AcceptedCategories.ToArray(),
                AllowedServices = AcceptedServices.ToArray()
            });

            
        await OnClosePreferences.InvokeAsync(true);
    }

    private void SelectedChanged(CookieCategory category, bool isAllowed)
    {
        switch (isAllowed)
        {
            case true:
                {
                    if (!AcceptedCategories.Contains(category.Identifier)) AcceptedCategories.Add(category.Identifier);

                    foreach (var service in category.Services.Where(service
                                 => !AcceptedServices.Contains(service.Identifier)))
                    {
                        AcceptedServices.Add(service.Identifier);
                    }

                    break;
                }
            case false:
                {
                    if (AcceptedCategories.Contains(category.Identifier))
                        AcceptedCategories.Remove(category.Identifier);

                    foreach (var service in category.Services.Where(service
                                 => AcceptedServices.Contains(service.Identifier)))
                    {
                        AcceptedServices.Remove(service.Identifier);
                    }

                    break;
                }
        }
    }
}