@using System.Security.Claims
@using Microsoft.AspNetCore.Identity
@using SpotSync.Common
@using SpotSync.Components.Account
@using SpotSync.Data
@using SpotSync.Interfaces
@inject AuthenticationStateProvider AuthenticationStateProvider
<header class="navbar navbar-expand-sm navbar-transparent d-print-none">
    <div class="container-xl">
        @*Toggle on Collapsed Menu*@
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbar-menu" aria-controls="navbar-menu" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        @*Logo*@
        <h1 class="navbar-brand navbar-brand-autodark d-none-navbar-horizontal pe-0 pe-sm-3">
            <a href="/">
                <img src="/img/HorizontalLogo.svg" width="110" height="32" alt="SpotSync" class="navbar-brand-image">
            </a>
        </h1>
        @*Avatar *@
        <div class="navbar-nav flex-row order-md-last">
            <div class="nav-item dropdown">
                <a href="#" class="nav-link d-flex lh-1 text-reset p-0" data-bs-toggle="dropdown" aria-label="Open user menu">
                    @if(!profilePicture.IsNullOrWhiteSpace())
                    {
                        <span class="avatar avatar-sm" style="background-image: url(@profilePicture)"></span>
                    }
                    else
                    {
                        <span class="avatar avatar-sm" >@user.Identity.Name.Substring(0,2)</span>
                    }
                    
                    
                    <div class="d-none d-xl-block ps-2">
                        <div>@user.Identity.Name</div>
                        <div class="mt-1 small text-secondary">@productString</div>
                    </div>
                </a>
                <div class="dropdown-menu dropdown-menu-end dropdown-menu-arrow">
                    <a href="Account/Manage" class="dropdown-item">Profile</a>
                    <form action="Account/Logout" method="post">
                        <AntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" value="" />
                        <button type="submit" class="dropdown-item">
                            <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
                        </button>
                    </form>
                </div>
            </div>
        </div>
        <div class="collapse navbar-collapse" id="navbar-menu">
            <div class="d-flex flex-column flex-md-row flex-fill align-items-stretch align-items-md-center">
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a class="nav-link" href="/">
                            <span class="nav-link-icon d-md-none d-lg-inline-block">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon icon-tabler icons-tabler-outline icon-tabler-home"><path stroke="none" d="M0 0h24v24H0z" fill="none" /><path d="M5 12l-2 0l9 -9l9 9l-2 0" /><path d="M5 12v7a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-7" /><path d="M9 21v-6a2 2 0 0 1 2 -2h2a2 2 0 0 1 2 2v6" /></svg>
                            </span>
                            <span class="nav-link-title">
                                Home
                            </span>
                        </a>
                    </li>
                    <li class="nav-item">
                        <button class="nav-link" @onclick=HandleRefreshClick>
                            <span class="@RotatingIconCss">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon icon-tabler icons-tabler-outline icon-tabler-refresh"><path stroke="none" d="M0 0h24v24H0z" fill="none" /><path d="M20 11a8.1 8.1 0 0 0 -15.5 -2m-.5 -4v4h4" /><path d="M4 13a8.1 8.1 0 0 0 15.5 2m.5 4v-4h-4" /></svg>
                            </span>
                            <span class="nav-link-title">
                                Refresh Playlist
                            </span>
                        </button>
                    </li>
                    <li class="nav-item">
                        <a href="https://spotify.com" class="btn" target="_blank" rel="noreferrer">
                            <img src="/img/Spotify_Logo_RGB_Black.png" height="24" />
                        </a>
                    </li>
                </ul>
               
            </div>
        </div>
    </div>
</header>
<style>
    .rotate {
        transition: 2s;
    }

    .rotating {
        transform: rotate(720deg);
    }
</style>

@code {
    [CascadingParameter] ISpotifyService SpotifyService { get; set; }

    private ClaimsPrincipal? user;

    private string productString;
    private string profilePicture;

    private string RotatingIconCss = "nav-link-icon d-md-none d-lg-inline-block rotate";

    protected override async Task OnParametersSetAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            if (user.HasClaim(c => c.Type == SpotifyClaimTypes.Product))
            {
                productString = user.Claims.First(c => c.Type == SpotifyClaimTypes.Product).Value;
            }

            if (user.HasClaim(c => c.Type == SpotifyClaimTypes.ProfilePicture))
            {
                profilePicture = user.Claims.First(c => c.Type == SpotifyClaimTypes.ProfilePicture).Value;
            }

        }
    }

    protected async Task HandleRefreshClick(MouseEventArgs e)
    {
        RotatingIconCss = "nav-link-icon d-md-none d-lg-inline-block rotate rotating";
        StateHasChanged();
        await SpotifyService.RefreshSelectedPlaylistAsync();
        await Task.Delay(2000);
        RotatingIconCss = "nav-link-icon d-md-none d-lg-inline-block rotate";
        StateHasChanged();
    }
}
