@page "/"
@using Microsoft.EntityFrameworkCore
@using SpotSync.Interfaces
@using SpotSync.Models
@using SpotifyAPI.Web

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDbContextFactory<ApplicationDbContext> dbContextFactory
@inject IConfiguration configuration
@inject IUserService userSerivce
@inject IMessageService messageService
<PageTitle>Home</PageTitle>

<div class="row row-deck row-cards">
	<div class="col-lg-4">
		<div class="card">
			<div class="card-header">
				<span class="card-title">All Playlists</span>
				<div class="card-actions">
					<button class="btn btn-primary btn-icon" data-bs-toggle="modal" data-bs-target="#addPlaylistModal">
						<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon icon-tabler icons-tabler-outline icon-tabler-plus">
							<path stroke="none" d="M0 0h24v24H0z" fill="none" />
							<path d="M12 5l0 14" />
							<path d="M5 12l14 0" />
						</svg>

					</button>
				</div>
			</div>
			<div class="card-body">
				<ul>
					@*TODO Pagination*@
					@foreach (var playlist in Playlists?.Items.Where(x => x.Owner?.Id == Me.Id || (bool)(x.Collaborative ?? false)))
					{
						<li class="d-flex mb-1">
							<span class="">
								@playlist.Name
							</span>
							<button class="ms-auto btn btn-success btn-sm" disabled="@(playlist.Id == User.SelectedPlaylist)" @onclick="() =>PlaylistSelected(playlist.Id)">
								Choose Playlist
							</button>
						</li>	
					}
				</ul>
			</div>
		</div>
	</div>
	<div class="col-lg-4">
		<div class="card">
			<div class="card-header">
				<span class="card-title">Last Liked Songs</span>
			</div>
			<div class="card-body">
				@*TODO Pagination*@
				@foreach(var track in SavedTracks.Take(20))
				{
					<li class="d-flex">
						@track.Track.Name on @track.Track.Album.Name by @track.Track.Artists.First().Name
					</li>
				}
			</div>
		</div>
	</div>
	<div class="col-lg-4">
		<div class="card">
			<div class="card-header">
				<span class="card-title">Settings</span>
				<div class="card-actions">
				</div>
			</div>
			<div class="card-body">
				<span >@User.LastRefresh?</span>
				<label class="col-5 col-form-label">Refresh Time</label>
				<InputSelect 
					class="col form-select"
					@bind-Value="User.RefreshHour"
					@bind-Value:after=RefreshTimeUpdated>
					<option value="0">0 Clock</option>
					<option value="1">1 Clock</option>
					<option value="2">2 Clock</option>
					<option value="3">3 Clock</option>
					<option value="4">4 Clock</option>
					<option value="5">5 Clock</option>
					<option value="6">6 Clock</option>
					<option value="7">7 Clock</option>
					<option value="8">8 Clock</option>
					<option value="9">9 Clock</option>
					<option value="10">10 Clock</option>
					<option value="11">11 Clock</option>
					<option value="12">12 Clock</option>
					<option value="13">13 Clock</option>
					<option value="14">14 Clock</option>
					<option value="15">15 Clock</option>
					<option value="16">16 Clock</option>
					<option value="17">17 Clock</option>
					<option value="18">18 Clock</option>
					<option value="19">19 Clock</option>
					<option value="20">20 Clock</option>
					<option value="21">21 Clock</option>
					<option value="22">22 Clock</option>
					<option value="23">23 Clock</option>
				</InputSelect>
			</div>
		</div>
	</div>
</div>

<EditForm Model="addPlaylistModel" class="modal" id="addPlaylistModal" tabindex="-1" OnValidSubmit="AddPlaylistSubmit" FormName="addPlaylistModal">
	<DataAnnotationsValidator />
	<div class="modal-dialog" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Add Playlist</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<div class="mb-3">
					<label class="form-label required">@nameof(addPlaylistModel.Name)</label>
					<InputText @bind-Value=addPlaylistModel.Name type="text" class="form-control" name="example-text-input" placeholder="Your report name" />
				</div>
				
				<div class="mb-3">
					<label class="row">
						<span class="col">@nameof(addPlaylistModel.Public)</span>
						<span class="col-auto">
							<label class="form-check form-check-single form-switch">
								<InputCheckbox class="form-check-input" type="checkbox" @bind-Value=addPlaylistModel.Public />
							</label>
						</span>
					</label>
				</div>
				<div class="mb-3">
					<label class="row">
						<span class="col">@nameof(addPlaylistModel.Collaborative)</span>
						<span class="col-auto">
							<label class="form-check form-check-single form-switch">
								<InputCheckbox class="form-check-input" type="checkbox" @bind-Value=addPlaylistModel.Collaborative />
							</label>
						</span>
					</label>
				</div>
				
				
				<div class="mb-3">
					<label class="form-label">@nameof(addPlaylistModel.Description)</label>
					<InputTextArea class="form-control" rows="3" @bind-Value=addPlaylistModel.Description></InputTextArea>
				</div>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn me-auto" data-bs-dismiss="modal">Close</button>
				<button type="submit" class="btn btn-primary" >Add Playlist</button>
			</div>
		</div>
	</div>
</EditForm>
@code {

	[CascadingParameter] public ISpotifyService SpotifyService { get; set; }


	private ApplicationUser User { get; set; } = new();

	private Paging<FullPlaylist> Playlists { get; set; } = new() { Items = new() };
	private List<SavedTrack> SavedTracks { get; set; } = new();
	public PrivateUser Me = new();

	protected AddPlaylistModel addPlaylistModel = new();

	protected override async Task OnParametersSetAsync()
	{
		User = await userSerivce.GetUserAsync();
		var _ = await SpotifyService.BuildClientAsync();
		SavedTracks = await SpotifyService.GetLast100LikedSongsAsync();
		Me = await SpotifyService.GetProfileAsync();
		Playlists = await SpotifyService.GetPlaylistsAsync();
	}

	private async Task AddPlaylistSubmit()
	{
		await SpotifyService.AddPlaylistAsync(addPlaylistModel.ToRequest());
	}

	private async Task RefreshTimeUpdated()
	{
		await userSerivce.UpdateRefreshTimeAsync(User.RefreshHour);
		messageService.AddMessage(new()
			{
				Title = "Saving successful",
				Text = "Refresh Time Updated"
			});
	}

	private async Task PlaylistSelected(string playlistId)
	{
		await userSerivce.UpdatePlaylistAsync(playlistId);
	}

	
}